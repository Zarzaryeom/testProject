package e_oop;

public class Variablelnit {

	//명시적 초기화
	//변수를 선언하며 동시에 초기화 하는 방법
	int var = 10;
	static int classVar = 20;
	
	
	
	
	
	
	//초기화 블럭
	//블럭(중괄호)를 사용하여
	//초기화 하는 내용이 길어질 때 사용한다

	//인스턴스 변수 초기화
	{
		var = 20;
	}
	
	//클래스 변수 초기화
	static {
		classVar = 40;
	}
	

	
	//**생성자
	/*
	 * new Scanner(); 
	 * -> 클래스의 이름과 같은 매서드를 생성, 생성자 호출
	 * -> static이 붙지 않은 얘들만 호출
	 * - 클래스와 같은 이름의 매서드(자바에서는 반드시 클래스와 같은 이름을 갖고 있어야 한다.)
	 * - 인스턴스 변수를 초기화 하기 위해 사용한다.
	 * - 클래스에 생성자는 반드시 하나 이상 존재해야 한다.
	 * - 직접 선언해주지 않으면 컴파일러가 기본 생성자를 만들어준다.
	 * - 생성자는 리턴타입이 없다.
	 * - 파라미터를 사용할 수 있기 때문에 사용한다.
	*/
	
	
	Variablelnit() {
	//생성자
		var = 50;		
		//생성자를 사용하는 이유는 파라미터를 사용할 수 있기 때문이다.
	}
	
	public static void main(String[] args) {
		Init i1 = new Init();
		i1.a = 10;
		i1.b = 20;
		i1.c = 30;
		
		Init i2 = new Init();
		i2.a = 40;
		i2.b = 50;
		i2.c = 60;
			
		Init i3 = new Init(70, 80, 90);
		//괄호안에 값만 적어주는 것 만으로 초기화를 마칠 수 있다.
		//값을 외부에서 받아서 초기화 해야될 때 사용된다.
		
		
	}
	
	
}

class Init{
	int a;
	int b;
	int c;
	
	//생성자 제작
	Init(int a, int b, int c){
		this.a = a;
		this.b = b;
		this.c = c;
		//this : 인스턴스 변수와 지역변수의 이름이 같을 때 둘을 구분하기 위해 사용한다.
		//  -> 객체의 주소가 저장되어 있는 변수
	}
	
	//파라미터가 없는 생성자
	Init(){
		this(10, 20, 30);
		//this() : 생성자에서 다른 생성자를 호출할 때 사용한다)
		
		//this 뒤에 ()의 유무에 따라 의미가 달라진다.
		//오버로딩 : 같은 이름의 매서드를 여러개 정의하는 것, 매서드는 이름이 중복되어도 된다.
//		  -> 파라미터의 갯수와 타입을 통해 중복되는 파일을 구분한다.
//		    (조건 : 파라미터의 개수나 타입이 달라야 한다.)
//		  -> 대표적인 예 : println
	}
}
